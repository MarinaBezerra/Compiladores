// Generated from Projeto.g4 by ANTLR 4.5.3
package autogenerated;
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class ProjetoLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.5.3", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, INT=6, ID=7, COMMENT=8, WS=9;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "NUMBER", "LETTER", "INT", "ID", 
		"COMMENT", "WS"
	};

	private static final String[] _LITERAL_NAMES = {
		null, "'#define'", "'#undef'", "'#ifdef'", "'#ifndef'", "'#endif'"
	};
	private static final String[] _SYMBOLIC_NAMES = {
		null, null, null, null, null, null, "INT", "ID", "COMMENT", "WS"
	};
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}


	public ProjetoLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "Projeto.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2\13c\b\1\4\2\t\2\4"+
		"\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t"+
		"\13\4\f\t\f\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3\3\3"+
		"\3\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\6\3\6"+
		"\3\6\3\6\3\6\3\6\3\6\3\7\3\7\3\b\3\b\3\t\6\tD\n\t\r\t\16\tE\3\n\3\n\3"+
		"\n\7\nK\n\n\f\n\16\nN\13\n\3\13\3\13\3\13\3\13\7\13T\n\13\f\13\16\13W"+
		"\13\13\3\13\3\13\3\13\3\13\3\f\6\f^\n\f\r\f\16\f_\3\f\3\f\3U\2\r\3\3\5"+
		"\4\7\5\t\6\13\7\r\2\17\2\21\b\23\t\25\n\27\13\3\2\5\3\2\62;\4\2C\\c|\5"+
		"\2\13\f\17\17\"\"e\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13"+
		"\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\3\31\3\2"+
		"\2\2\5!\3\2\2\2\7(\3\2\2\2\t/\3\2\2\2\13\67\3\2\2\2\r>\3\2\2\2\17@\3\2"+
		"\2\2\21C\3\2\2\2\23G\3\2\2\2\25O\3\2\2\2\27]\3\2\2\2\31\32\7%\2\2\32\33"+
		"\7f\2\2\33\34\7g\2\2\34\35\7h\2\2\35\36\7k\2\2\36\37\7p\2\2\37 \7g\2\2"+
		" \4\3\2\2\2!\"\7%\2\2\"#\7w\2\2#$\7p\2\2$%\7f\2\2%&\7g\2\2&\'\7h\2\2\'"+
		"\6\3\2\2\2()\7%\2\2)*\7k\2\2*+\7h\2\2+,\7f\2\2,-\7g\2\2-.\7h\2\2.\b\3"+
		"\2\2\2/\60\7%\2\2\60\61\7k\2\2\61\62\7h\2\2\62\63\7p\2\2\63\64\7f\2\2"+
		"\64\65\7g\2\2\65\66\7h\2\2\66\n\3\2\2\2\678\7%\2\289\7g\2\29:\7p\2\2:"+
		";\7f\2\2;<\7k\2\2<=\7h\2\2=\f\3\2\2\2>?\t\2\2\2?\16\3\2\2\2@A\t\3\2\2"+
		"A\20\3\2\2\2BD\5\r\7\2CB\3\2\2\2DE\3\2\2\2EC\3\2\2\2EF\3\2\2\2F\22\3\2"+
		"\2\2GL\5\17\b\2HK\5\17\b\2IK\5\r\7\2JH\3\2\2\2JI\3\2\2\2KN\3\2\2\2LJ\3"+
		"\2\2\2LM\3\2\2\2M\24\3\2\2\2NL\3\2\2\2OP\7\61\2\2PQ\7\61\2\2QU\3\2\2\2"+
		"RT\13\2\2\2SR\3\2\2\2TW\3\2\2\2UV\3\2\2\2US\3\2\2\2VX\3\2\2\2WU\3\2\2"+
		"\2XY\7\f\2\2YZ\3\2\2\2Z[\b\13\2\2[\26\3\2\2\2\\^\t\4\2\2]\\\3\2\2\2^_"+
		"\3\2\2\2_]\3\2\2\2_`\3\2\2\2`a\3\2\2\2ab\b\f\2\2b\30\3\2\2\2\b\2EJLU_"+
		"\3\b\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}