// Generated from Projeto.g4 by ANTLR 4.5.3
package autogenerated;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class ProjetoParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.5.3", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, INT=6, ID=7, COMMENT=8, WS=9;
	public static final int
		RULE_ini = 0, RULE_dir = 1;
	public static final String[] ruleNames = {
		"ini", "dir"
	};

	private static final String[] _LITERAL_NAMES = {
		null, "'#define'", "'#undef'", "'#ifdef'", "'#ifndef'", "'#endif'"
	};
	private static final String[] _SYMBOLIC_NAMES = {
		null, null, null, null, null, null, "INT", "ID", "COMMENT", "WS"
	};
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "Projeto.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public ProjetoParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}
	public static class IniContext extends ParserRuleContext {
		public IniContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ini; }
	 
		public IniContext() { }
		public void copyFrom(IniContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class DirectivesContext extends IniContext {
		public List<DirContext> dir() {
			return getRuleContexts(DirContext.class);
		}
		public DirContext dir(int i) {
			return getRuleContext(DirContext.class,i);
		}
		public DirectivesContext(IniContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof ProjetoVisitor ) return ((ProjetoVisitor<? extends T>)visitor).visitDirectives(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IniContext ini() throws RecognitionException {
		IniContext _localctx = new IniContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_ini);
		int _la;
		try {
			_localctx = new DirectivesContext(_localctx);
			enterOuterAlt(_localctx, 1);
			{
			setState(5); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4);
				dir();
				}
				}
				setState(7); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DirContext extends ParserRuleContext {
		public DirContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dir; }
	 
		public DirContext() { }
		public void copyFrom(DirContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class UndefineContext extends DirContext {
		public TerminalNode ID() { return getToken(ProjetoParser.ID, 0); }
		public UndefineContext(DirContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof ProjetoVisitor ) return ((ProjetoVisitor<? extends T>)visitor).visitUndefine(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DefineContext extends DirContext {
		public TerminalNode ID() { return getToken(ProjetoParser.ID, 0); }
		public TerminalNode INT() { return getToken(ProjetoParser.INT, 0); }
		public DefineContext(DirContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof ProjetoVisitor ) return ((ProjetoVisitor<? extends T>)visitor).visitDefine(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IfNotDefinedRecContext extends DirContext {
		public TerminalNode ID() { return getToken(ProjetoParser.ID, 0); }
		public DirContext dir() {
			return getRuleContext(DirContext.class,0);
		}
		public IfNotDefinedRecContext(DirContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof ProjetoVisitor ) return ((ProjetoVisitor<? extends T>)visitor).visitIfNotDefinedRec(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IfNotDefinedBaseContext extends DirContext {
		public TerminalNode ID() { return getToken(ProjetoParser.ID, 0); }
		public IfNotDefinedBaseContext(DirContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof ProjetoVisitor ) return ((ProjetoVisitor<? extends T>)visitor).visitIfNotDefinedBase(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IfDefinedRecContext extends DirContext {
		public TerminalNode ID() { return getToken(ProjetoParser.ID, 0); }
		public DirContext dir() {
			return getRuleContext(DirContext.class,0);
		}
		public IfDefinedRecContext(DirContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof ProjetoVisitor ) return ((ProjetoVisitor<? extends T>)visitor).visitIfDefinedRec(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class EndIfContext extends DirContext {
		public EndIfContext(DirContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof ProjetoVisitor ) return ((ProjetoVisitor<? extends T>)visitor).visitEndIf(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IfDefinedBaseContext extends DirContext {
		public TerminalNode ID() { return getToken(ProjetoParser.ID, 0); }
		public IfDefinedBaseContext(DirContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof ProjetoVisitor ) return ((ProjetoVisitor<? extends T>)visitor).visitIfDefinedBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DirContext dir() throws RecognitionException {
		DirContext _localctx = new DirContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_dir);
		try {
			setState(25);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1,_ctx) ) {
			case 1:
				_localctx = new DefineContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(9);
				match(T__0);
				setState(10);
				match(ID);
				setState(11);
				match(INT);
				}
				break;
			case 2:
				_localctx = new UndefineContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(12);
				match(T__1);
				setState(13);
				match(ID);
				}
				break;
			case 3:
				_localctx = new IfDefinedRecContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(14);
				match(T__2);
				setState(15);
				match(ID);
				setState(16);
				dir();
				}
				break;
			case 4:
				_localctx = new IfDefinedBaseContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(17);
				match(T__2);
				setState(18);
				match(ID);
				}
				break;
			case 5:
				_localctx = new IfNotDefinedRecContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(19);
				match(T__3);
				setState(20);
				match(ID);
				setState(21);
				dir();
				}
				break;
			case 6:
				_localctx = new IfNotDefinedBaseContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(22);
				match(T__3);
				setState(23);
				match(ID);
				}
				break;
			case 7:
				_localctx = new EndIfContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(24);
				match(T__4);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\3\13\36\4\2\t\2\4\3"+
		"\t\3\3\2\6\2\b\n\2\r\2\16\2\t\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3"+
		"\3\3\3\3\3\3\3\3\3\3\3\3\5\3\34\n\3\3\3\2\2\4\2\4\2\2\"\2\7\3\2\2\2\4"+
		"\33\3\2\2\2\6\b\5\4\3\2\7\6\3\2\2\2\b\t\3\2\2\2\t\7\3\2\2\2\t\n\3\2\2"+
		"\2\n\3\3\2\2\2\13\f\7\3\2\2\f\r\7\t\2\2\r\34\7\b\2\2\16\17\7\4\2\2\17"+
		"\34\7\t\2\2\20\21\7\5\2\2\21\22\7\t\2\2\22\34\5\4\3\2\23\24\7\5\2\2\24"+
		"\34\7\t\2\2\25\26\7\6\2\2\26\27\7\t\2\2\27\34\5\4\3\2\30\31\7\6\2\2\31"+
		"\34\7\t\2\2\32\34\7\7\2\2\33\13\3\2\2\2\33\16\3\2\2\2\33\20\3\2\2\2\33"+
		"\23\3\2\2\2\33\25\3\2\2\2\33\30\3\2\2\2\33\32\3\2\2\2\34\5\3\2\2\2\4\t"+
		"\33";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}